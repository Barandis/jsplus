// Copyright (c) 2021 Thomas J. Otterson
//
// This software is released under the MIT License.
// https://opensource.org/licenses/MIT

const { expect } = require('test/utils')

const compose = require('combinators/compose')
const composeAll = require('combinators/composeAll')
const pipe = require('combinators/pipe')
const pipeAll = require('combinators/pipeAll')
const rotl = require('combinators/rotl')
const rotr = require('combinators/rotr')
const swap = require('combinators/swap')

const B = require('combinators/pure/B')
const C = require('combinators/pure/C')
const Cs = require('combinators/pure/Cs')
const I = require('combinators/pure/I')
const Is = require('combinators/pure/Is')
const K = require('combinators/pure/K')
const Psi = require('combinators/pure/Psi')
const Q = require('combinators/pure/Q')
const R = require('combinators/pure/R')
const Rs = require('combinators/pure/Rs')
const S = require('combinators/pure/S')
const Sp = require('combinators/pure/Sp')
const T = require('combinators/pure/T')
const W = require('combinators/pure/W')

const curry = require('functions/curry')
const curry2 = require('functions/curry2')
const curry3 = require('functions/curry3')
const curry4 = require('functions/curry4')
const curry5 = require('functions/curry5')
const curryn = require('functions/curryn')
const partial = require('functions/partial')

const array = require('iterators/array')
const enumerate = require('iterators/enumerate')
const infinite = require('iterators/infinite')
const iterator = require('iterators/iterator')
const map = require('iterators/map')
const range = require('iterators/range')
const reduce = require('iterators/reduce')
const reverse = require('iterators/reverse')
const scan = require('iterators/scan')

const add = require('operators/add')
const band = require('operators/band')
const bls = require('operators/bls')
const bnot = require('operators/bnot')
const bor = require('operators/bor')
const brs = require('operators/brs')
const burs = require('operators/burs')
const bxor = require('operators/bxor')
const coal = require('operators/coal')
const ceq = require('operators/ceq')
const cne = require('operators/cne')
const cond = require('operators/cond')
const div = require('operators/div')
const eq = require('operators/eq')
const ge = require('operators/ge')
const gt = require('operators/gt')
const land = require('operators/land')
const le = require('operators/le')
const lnot = require('operators/lnot')
const lor = require('operators/lor')
const lt = require('operators/lt')
const mul = require('operators/mul')
const ne = require('operators/ne')
const neg = require('operators/neg')
const opt = require('operators/opt')
const plus = require('operators/plus')
const pow = require('operators/pow')
const prop = require('operators/prop')
const rem = require('operators/rem')
const sub = require('operators/sub')

const bigint = require('primitives/bigint')
const boolean = require('primitives/boolean')
const number = require('primitives/number')
const string = require('primitives/string')
const symbol = require('primitives/symbol')

const isArray = require('utilities/isArray')
const isFunction = require('utilities/isFunction')
const isNumber = require('utilities/isNumber')
const isObject = require('utilities/isObject')
const isString = require('utilities/isString')

const index = require('.')

describe('src index', () => {
  it('provides all of the exported functions', () => {
    // combinators
    expect(compose).to.equal(index.compose)
    expect(composeAll).to.equal(index.composeAll)
    expect(pipe).to.equal(index.pipe)
    expect(pipeAll).to.equal(index.pipeAll)
    expect(rotl).to.equal(index.rotl)
    expect(rotr).to.equal(index.rotr)
    expect(swap).to.equal(index.swap)

    // pure combinators
    expect(B).to.equal(index.B)
    expect(C).to.equal(index.C)
    expect(Cs).to.equal(index.Cs)
    expect(I).to.equal(index.I)
    expect(Is).to.equal(index.Is)
    expect(K).to.equal(index.K)
    expect(Psi).to.equal(index.Psi)
    expect(Q).to.equal(index.Q)
    expect(R).to.equal(index.R)
    expect(Rs).to.equal(index.Rs)
    expect(S).to.equal(index.S)
    expect(Sp).to.equal(index.Sp)
    expect(T).to.equal(index.T)
    expect(W).to.equal(index.W)

    // functions
    expect(curry).to.equal(index.curry)
    expect(curry2).to.equal(index.curry2)
    expect(curry3).to.equal(index.curry3)
    expect(curry4).to.equal(index.curry4)
    expect(curry5).to.equal(index.curry5)
    expect(curryn).to.equal(index.curryn)
    expect(partial).to.equal(index.partial)

    // iterators
    expect(array).to.equal(index.array)
    expect(enumerate).to.equal(index.enumerate)
    expect(infinite).to.equal(index.infinite)
    expect(iterator).to.equal(index.iterator)
    expect(map).to.equal(index.map)
    expect(range).to.equal(index.range)
    expect(reduce).to.equal(index.reduce)
    expect(reverse).to.equal(index.reverse)
    expect(scan).to.equal(index.scan)

    // operators
    expect(add).to.equal(index.add)
    expect(band).to.equal(index.band)
    expect(bls).to.equal(index.bls)
    expect(bnot).to.equal(index.bnot)
    expect(bor).to.equal(index.bor)
    expect(brs).to.equal(index.brs)
    expect(burs).to.equal(index.burs)
    expect(bxor).to.equal(index.bxor)
    expect(coal).to.equal(index.coal)
    expect(ceq).to.equal(index.ceq)
    expect(cne).to.equal(index.cne)
    expect(cond).to.equal(index.cond)
    expect(div).to.equal(index.div)
    expect(eq).to.equal(index.eq)
    expect(ge).to.equal(index.ge)
    expect(gt).to.equal(index.gt)
    expect(land).to.equal(index.land)
    expect(le).to.equal(index.le)
    expect(lnot).to.equal(index.lnot)
    expect(lor).to.equal(index.lor)
    expect(lt).to.equal(index.lt)
    expect(mul).to.equal(index.mul)
    expect(ne).to.equal(index.ne)
    expect(neg).to.equal(index.neg)
    expect(opt).to.equal(index.opt)
    expect(plus).to.equal(index.plus)
    expect(pow).to.equal(index.pow)
    expect(prop).to.equal(index.prop)
    expect(rem).to.equal(index.rem)
    expect(sub).to.equal(index.sub)

    // primitives
    expect(bigint).to.equal(index.bigint)
    expect(boolean).to.equal(index.boolean)
    expect(number).to.equal(index.number)
    expect(string).to.equal(index.string)
    expect(symbol).to.equal(index.symbol)

    // utilities
    expect(isArray).to.equal(index.isArray)
    expect(isFunction).to.equal(index.isFunction)
    expect(isNumber).to.equal(index.isNumber)
    expect(isObject).to.equal(index.isObject)
    expect(isString).to.equal(index.isString)
  })
})
