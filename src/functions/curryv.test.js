// Copyright (c) 2021 Thomas J. Otterson
//
// This software is released under the MIT License.
// https://opensource.org/licenses/MIT

const { expect } = require('test/utils')

const curryv = require('functions/curryv')

describe('curryv', () => {
  it('will curry a 2-argument function', () => {
    const sum = curryv((a, b) => a + b)
    expect(sum(1)).to.be.a('function')
    expect(sum(1)(2)).to.equal(3)
    expect(sum(1, 2)).to.equal(3)
  })
  it('will return a curried function with 3 args', () => {
    const sum = curryv((a, b, c) => a + b + c)

    expect(sum(1)).to.be.a('function')
    expect(sum(1)(2)).to.be.a('function')
    expect(sum(1)(2)(3)).to.equal(6)
    expect(sum(1)(2, 3)).to.equal(6)
    expect(sum(1, 2)).to.be.a('function')
    expect(sum(1, 2)(3)).to.equal(6)
    expect(sum(1, 2, 3)).to.equal(6)
  })
  it('will return a curried function with 4 args', () => {
    const sum = curryv((a, b, c, d) => a + b + c + d)

    expect(sum(1)).to.be.a('function')
    expect(sum(1)(2)).to.be.a('function')
    expect(sum(1)(2)(3)).to.be.a('function')
    expect(sum(1)(2)(3)(4)).to.equal(10)
    expect(sum(1)(2)(3, 4)).to.equal(10)
    expect(sum(1)(2, 3)).to.be.a('function')
    expect(sum(1)(2, 3)(4)).to.equal(10)
    expect(sum(1)(2, 3, 4)).to.equal(10)
    expect(sum(1, 2)).to.be.a('function')
    expect(sum(1, 2)(3)).to.be.a('function')
    expect(sum(1, 2)(3)(4)).to.equal(10)
    expect(sum(1, 2)(3, 4)).to.equal(10)
    expect(sum(1, 2, 3)).to.be.a('function')
    expect(sum(1, 2, 3)(4)).to.equal(10)
    expect(sum(1, 2, 3, 4)).to.equal(10)
  })
  it('will return a curried function with 5 args', () => {
    const sum = curryv((a, b, c, d, e) => a + b + c + d + e)

    expect(sum(1)).to.be.a('function')
    expect(sum(1)(2)).to.be.a('function')
    expect(sum(1)(2)(3)).to.be.a('function')
    expect(sum(1)(2)(3)(4)).to.be.a('function')
    expect(sum(1)(2)(3)(4)(5)).to.equal(15)
    expect(sum(1)(2)(3)(4, 5)).to.equal(15)
    expect(sum(1)(2)(3, 4)).to.be.a('function')
    expect(sum(1)(2)(3, 4)(5)).to.equal(15)
    expect(sum(1)(2)(3, 4, 5)).to.equal(15)
    expect(sum(1)(2, 3)).to.be.a('function')
    expect(sum(1)(2, 3)(4)).to.be.a('function')
    expect(sum(1)(2, 3)(4)(5)).to.equal(15)
    expect(sum(1)(2, 3)(4, 5)).to.equal(15)
    expect(sum(1)(2, 3, 4)).to.be.a('function')
    expect(sum(1)(2, 3, 4)(5)).to.equal(15)
    expect(sum(1)(2, 3, 4, 5)).to.equal(15)
    expect(sum(1, 2)).to.be.a('function')
    expect(sum(1, 2)(3)).to.be.a('function')
    expect(sum(1, 2)(3)(4)).to.be.a('function')
    expect(sum(1, 2)(3)(4)(5)).to.equal(15)
    expect(sum(1, 2)(3)(4, 5)).to.equal(15)
    expect(sum(1, 2)(3, 4)).to.be.a('function')
    expect(sum(1, 2)(3, 4)(5)).to.equal(15)
    expect(sum(1, 2)(3, 4, 5)).to.equal(15)
    expect(sum(1, 2, 3)).to.be.a('function')
    expect(sum(1, 2, 3)(4)).to.be.a('function')
    expect(sum(1, 2, 3)(4)(5)).to.equal(15)
    expect(sum(1, 2, 3)(4, 5)).to.equal(15)
    expect(sum(1, 2, 3, 4)).to.be.a('function')
    expect(sum(1, 2, 3, 4)(5)).to.equal(15)
    expect(sum(1, 2, 3, 4, 5)).to.equal(15)
  })
  it('will return a curried function with 6 args', () => {
    const sum = curryv((a, b, c, d, e, f) => a + b + c + d + e + f)

    expect(sum(1)).to.be.a('function')
    expect(sum(1)(2)).to.be.a('function')
    expect(sum(1)(2)(3)).to.be.a('function')
    expect(sum(1)(2)(3)(4)).to.be.a('function')
    expect(sum(1)(2)(3)(4)(5)).to.be.a('function')
    expect(sum(1)(2)(3)(4)(5)(6)).to.equal(21)
    expect(sum(1)(2)(3)(4)(5, 6)).to.equal(21)
    expect(sum(1)(2)(3)(4, 5)).to.be.a('function')
    expect(sum(1)(2)(3)(4, 5)(6)).to.equal(21)
    expect(sum(1)(2)(3)(4, 5, 6)).to.equal(21)
    expect(sum(1)(2)(3, 4)).to.be.a('function')
    expect(sum(1)(2)(3, 4)(5)).to.be.a('function')
    expect(sum(1)(2)(3, 4)(5)(6)).to.equal(21)
    expect(sum(1)(2)(3, 4)(5, 6)).to.equal(21)
    expect(sum(1)(2)(3, 4, 5)).to.be.a('function')
    expect(sum(1)(2)(3, 4, 5)(6)).to.equal(21)
    expect(sum(1)(2)(3, 4, 5, 6)).to.equal(21)
    expect(sum(1)(2, 3)).to.be.a('function')
    expect(sum(1)(2, 3)(4)).to.be.a('function')
    expect(sum(1)(2, 3)(4)(5)).to.be.a('function')
    expect(sum(1)(2, 3)(4)(5)(6)).to.equal(21)
    expect(sum(1)(2, 3)(4)(5, 6)).to.equal(21)
    expect(sum(1)(2, 3)(4, 5)).to.be.a('function')
    expect(sum(1)(2, 3)(4, 5)(6)).to.equal(21)
    expect(sum(1)(2, 3)(4, 5, 6)).to.equal(21)
    expect(sum(1)(2, 3, 4)).to.be.a('function')
    expect(sum(1)(2, 3, 4)(5)).to.be.a('function')
    expect(sum(1)(2, 3, 4)(5)(6)).to.equal(21)
    expect(sum(1)(2, 3, 4)(5, 6)).to.equal(21)
    expect(sum(1)(2, 3, 4, 5)).to.be.a('function')
    expect(sum(1)(2, 3, 4, 5)(6)).to.equal(21)
    expect(sum(1)(2, 3, 4, 5, 6)).to.equal(21)
    expect(sum(1, 2)).to.be.a('function')
    expect(sum(1, 2)(3)).to.be.a('function')
    expect(sum(1, 2)(3)(4)).to.be.a('function')
    expect(sum(1, 2)(3)(4)(5)).to.be.a('function')
    expect(sum(1, 2)(3)(4)(5)(6)).to.equal(21)
    expect(sum(1, 2)(3)(4)(5, 6)).to.equal(21)
    expect(sum(1, 2)(3)(4, 5)).to.be.a('function')
    expect(sum(1, 2)(3)(4, 5)(6)).to.equal(21)
    expect(sum(1, 2)(3)(4, 5, 6)).to.equal(21)
    expect(sum(1, 2)(3, 4)).to.be.a('function')
    expect(sum(1, 2)(3, 4)(5)).to.be.a('function')
    expect(sum(1, 2)(3, 4)(5)(6)).to.equal(21)
    expect(sum(1, 2)(3, 4)(5, 6)).to.equal(21)
    expect(sum(1, 2)(3, 4, 5)).to.be.a('function')
    expect(sum(1, 2)(3, 4, 5)(6)).to.equal(21)
    expect(sum(1, 2)(3, 4, 5, 6)).to.equal(21)
    expect(sum(1, 2, 3)).to.be.a('function')
    expect(sum(1, 2, 3)(4)).to.be.a('function')
    expect(sum(1, 2, 3)(4)(5)).to.be.a('function')
    expect(sum(1, 2, 3)(4)(5)(6)).to.equal(21)
    expect(sum(1, 2, 3)(4)(5, 6)).to.equal(21)
    expect(sum(1, 2, 3)(4, 5)).to.be.a('function')
    expect(sum(1, 2, 3)(4, 5)(6)).to.equal(21)
    expect(sum(1, 2, 3)(4, 5, 6)).to.equal(21)
    expect(sum(1, 2, 3, 4)).to.be.a('function')
    expect(sum(1, 2, 3, 4)(5)).to.be.a('function')
    expect(sum(1, 2, 3, 4)(5)(6)).to.equal(21)
    expect(sum(1, 2, 3, 4)(5, 6)).to.equal(21)
    expect(sum(1, 2, 3, 4, 5)).to.be.a('function')
    expect(sum(1, 2, 3, 4, 5)(6)).to.equal(21)
    expect(sum(1, 2, 3, 4, 5, 6)).to.equal(21)
  })
  it('will not curry a function that it has already curried', () => {
    const csum = curryv(curryv((a, b, c) => a + b + c))
    expect(csum(1, 2, 3)).to.equal(6)
    expect(csum(1, 2)(3)).to.equal(6)
    expect(csum(1)(2, 3)).to.equal(6)
    expect(csum()(1, 2, 3)).to.equal(6)
    expect(csum(1)(2)(3)).to.equal(6)
  })
  it('will not curry a function with 0 or 1 arguments', () => {
    const zeroArg = () => null
    const oneArg = x => x

    expect(curryv(zeroArg)).to.equal(zeroArg)
    expect(curryv(oneArg)).to.equal(oneArg)
  })
  it('will not curry a manually curried function', () => {
    const csum = a => b => c => a + b + c
    const ccsum = curryv(csum)

    expect(csum).to.equal(ccsum)
    expect(ccsum(1)(2)(3)).to.equal(6)
  })
})
