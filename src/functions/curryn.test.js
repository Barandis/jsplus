// Copyright (c) 2021 Thomas J. Otterson
//
// This software is released under the MIT License.
// https://opensource.org/licenses/MIT

const { expect } = require('test/utils')

const curryn = require('functions/curryn')

const fn = (...ns) => ns.reduce((a, b) => a + b, 0)

describe('curryn', () => {
  it('will return the function if given 0 args', () => {
    expect(curryn(0, fn)).to.equal(fn)
  })
  it('will return the function if given 1 arg', () => {
    expect(curryn(1, fn)).to.equal(fn)
  })
  it('will return a curried function with 2 args', () => {
    const sum = curryn(2, fn)
    expect(sum(1)).to.be.a('function')
    expect(sum(1, 2)).to.be.a('function')
    expect(sum(1)(2)).to.equal(3)
  })
  it('will return a curried function with 3 args', () => {
    const sum = curryn(3, fn)

    expect(sum(1)).to.be.a('function')
    expect(sum(1)(2)).to.be.a('function')
    expect(sum(1)(2, 3)).to.be.a('function')
    expect(sum(1, 2)).to.be.a('function')
    expect(sum(1, 2)(3)).to.be.a('function')
    expect(sum(1, 2, 3)).to.be.a('function')
    expect(sum(1)(2)(3)).to.equal(6)
  })
  it('will return a curried function with 4 args', () => {
    const sum = curryn(4, fn)

    expect(sum(1)).to.be.a('function')
    expect(sum(1)(2)).to.be.a('function')
    expect(sum(1)(2)(3)).to.be.a('function')
    expect(sum(1)(2)(3, 4)).to.be.a('function')
    expect(sum(1)(2, 3)).to.be.a('function')
    expect(sum(1)(2, 3)(4)).to.be.a('function')
    expect(sum(1)(2, 3, 4)).to.be.a('function')
    expect(sum(1, 2)).to.be.a('function')
    expect(sum(1, 2)(3)).to.be.a('function')
    expect(sum(1, 2)(3)(4)).to.be.a('function')
    expect(sum(1, 2)(3, 4)).to.be.a('function')
    expect(sum(1, 2, 3)).to.be.a('function')
    expect(sum(1, 2, 3)(4)).to.be.a('function')
    expect(sum(1, 2, 3, 4)).to.be.a('function')
    expect(sum(1)(2)(3)(4)).to.equal(10)
  })
  it('will return a curried function with 5 args', () => {
    const sum = curryn(5, fn)

    expect(sum(1)).to.be.a('function')
    expect(sum(1)(2)).to.be.a('function')
    expect(sum(1)(2)(3)).to.be.a('function')
    expect(sum(1)(2)(3)(4)).to.be.a('function')
    expect(sum(1)(2)(3)(4, 5)).to.be.a('function')
    expect(sum(1)(2)(3, 4)).to.be.a('function')
    expect(sum(1)(2)(3, 4)(5)).to.be.a('function')
    expect(sum(1)(2)(3, 4, 5)).to.be.a('function')
    expect(sum(1)(2, 3)).to.be.a('function')
    expect(sum(1)(2, 3)(4)).to.be.a('function')
    expect(sum(1)(2, 3)(4)(5)).to.be.a('function')
    expect(sum(1)(2, 3)(4, 5)).to.be.a('function')
    expect(sum(1)(2, 3, 4)).to.be.a('function')
    expect(sum(1)(2, 3, 4)(5)).to.be.a('function')
    expect(sum(1)(2, 3, 4, 5)).to.be.a('function')
    expect(sum(1, 2)).to.be.a('function')
    expect(sum(1, 2)(3)).to.be.a('function')
    expect(sum(1, 2)(3)(4)).to.be.a('function')
    expect(sum(1, 2)(3)(4)(5)).to.be.a('function')
    expect(sum(1, 2)(3)(4, 5)).to.be.a('function')
    expect(sum(1, 2)(3, 4)).to.be.a('function')
    expect(sum(1, 2)(3, 4)(5)).to.be.a('function')
    expect(sum(1, 2)(3, 4, 5)).to.be.a('function')
    expect(sum(1, 2, 3)).to.be.a('function')
    expect(sum(1, 2, 3)(4)).to.be.a('function')
    expect(sum(1, 2, 3)(4)(5)).to.be.a('function')
    expect(sum(1, 2, 3)(4, 5)).to.be.a('function')
    expect(sum(1, 2, 3, 4)).to.be.a('function')
    expect(sum(1, 2, 3, 4)(5)).to.be.a('function')
    expect(sum(1, 2, 3, 4, 5)).to.be.a('function')
    expect(sum(1)(2)(3)(4)(5)).to.equal(15)
  })
  it('will return a curried function with 6 args', () => {
    const sum = curryn(6, fn)

    expect(sum(1)).to.be.a('function')
    expect(sum(1)(2)).to.be.a('function')
    expect(sum(1)(2)(3)).to.be.a('function')
    expect(sum(1)(2)(3)(4)).to.be.a('function')
    expect(sum(1)(2)(3)(4)(5)).to.be.a('function')
    expect(sum(1)(2)(3)(4)(5, 6)).to.be.a('function')
    expect(sum(1)(2)(3)(4, 5)).to.be.a('function')
    expect(sum(1)(2)(3)(4, 5)(6)).to.be.a('function')
    expect(sum(1)(2)(3)(4, 5, 6)).to.be.a('function')
    expect(sum(1)(2)(3, 4)).to.be.a('function')
    expect(sum(1)(2)(3, 4)(5)).to.be.a('function')
    expect(sum(1)(2)(3, 4)(5)(6)).to.be.a('function')
    expect(sum(1)(2)(3, 4)(5, 6)).to.be.a('function')
    expect(sum(1)(2)(3, 4, 5)).to.be.a('function')
    expect(sum(1)(2)(3, 4, 5)(6)).to.be.a('function')
    expect(sum(1)(2)(3, 4, 5, 6)).to.be.a('function')
    expect(sum(1)(2, 3)).to.be.a('function')
    expect(sum(1)(2, 3)(4)).to.be.a('function')
    expect(sum(1)(2, 3)(4)(5)).to.be.a('function')
    expect(sum(1)(2, 3)(4)(5)(6)).to.be.a('function')
    expect(sum(1)(2, 3)(4)(5, 6)).to.be.a('function')
    expect(sum(1)(2, 3)(4, 5)).to.be.a('function')
    expect(sum(1)(2, 3)(4, 5)(6)).to.be.a('function')
    expect(sum(1)(2, 3)(4, 5, 6)).to.be.a('function')
    expect(sum(1)(2, 3, 4)).to.be.a('function')
    expect(sum(1)(2, 3, 4)(5)).to.be.a('function')
    expect(sum(1)(2, 3, 4)(5)(6)).to.be.a('function')
    expect(sum(1)(2, 3, 4)(5, 6)).to.be.a('function')
    expect(sum(1)(2, 3, 4, 5)).to.be.a('function')
    expect(sum(1)(2, 3, 4, 5)(6)).to.be.a('function')
    expect(sum(1)(2, 3, 4, 5, 6)).to.be.a('function')
    expect(sum(1, 2)).to.be.a('function')
    expect(sum(1, 2)(3)).to.be.a('function')
    expect(sum(1, 2)(3)(4)).to.be.a('function')
    expect(sum(1, 2)(3)(4)(5)).to.be.a('function')
    expect(sum(1, 2)(3)(4)(5)(6)).to.be.a('function')
    expect(sum(1, 2)(3)(4)(5, 6)).to.be.a('function')
    expect(sum(1, 2)(3)(4, 5)).to.be.a('function')
    expect(sum(1, 2)(3)(4, 5)(6)).to.be.a('function')
    expect(sum(1, 2)(3)(4, 5, 6)).to.be.a('function')
    expect(sum(1, 2)(3, 4)).to.be.a('function')
    expect(sum(1, 2)(3, 4)(5)).to.be.a('function')
    expect(sum(1, 2)(3, 4)(5)(6)).to.be.a('function')
    expect(sum(1, 2)(3, 4)(5, 6)).to.be.a('function')
    expect(sum(1, 2)(3, 4, 5)).to.be.a('function')
    expect(sum(1, 2)(3, 4, 5)(6)).to.be.a('function')
    expect(sum(1, 2)(3, 4, 5, 6)).to.be.a('function')
    expect(sum(1, 2, 3)).to.be.a('function')
    expect(sum(1, 2, 3)(4)).to.be.a('function')
    expect(sum(1, 2, 3)(4)(5)).to.be.a('function')
    expect(sum(1, 2, 3)(4)(5)(6)).to.be.a('function')
    expect(sum(1, 2, 3)(4)(5, 6)).to.be.a('function')
    expect(sum(1, 2, 3)(4, 5)).to.be.a('function')
    expect(sum(1, 2, 3)(4, 5)(6)).to.be.a('function')
    expect(sum(1, 2, 3)(4, 5, 6)).to.be.a('function')
    expect(sum(1, 2, 3, 4)).to.be.a('function')
    expect(sum(1, 2, 3, 4)(5)).to.be.a('function')
    expect(sum(1, 2, 3, 4)(5)(6)).to.be.a('function')
    expect(sum(1, 2, 3, 4)(5, 6)).to.be.a('function')
    expect(sum(1, 2, 3, 4, 5)).to.be.a('function')
    expect(sum(1, 2, 3, 4, 5)(6)).to.be.a('function')
    expect(sum(1, 2, 3, 4, 5, 6)).to.be.a('function')
    expect(sum(1)(2)(3)(4)(5)(6)).to.equal(21)
  })
})
